<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <Import Project="$(SolutionDir)\Patcher\Prism.Build.props" Condition="Exists('$(SolutionDir)\Patcher\Prism.Build.props')" />
  <PropertyGroup>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{6B42EB0B-AFA3-4449-ACDA-AA91C8A39DC0}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Prism.TerrariaPatcher</RootNamespace>
    <AssemblyName>Prism.TerrariaPatcher</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup>
    <NoWin32Manifest>true</NoWin32Manifest>
  </PropertyGroup>
  <PropertyGroup>
    <ApplicationIcon>..\..\res\Icons\PrismIcon_Misc.ico</ApplicationIcon>
  </PropertyGroup>
  <PropertyGroup>
    <StartupObject />
  </PropertyGroup>
  <PropertyGroup>
    <RunPostBuildEvent>Always</RunPostBuildEvent>
  </PropertyGroup>
  <ItemGroup Condition="'$(OS)' == 'Windows_NT'">
    <Reference Condition="'$(OS)' == 'Windows_NT'" Include="Microsoft.Xna.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553, processorArchitecture=x86" />
    <Reference Condition="'$(OS)' == 'Windows_NT'" Include="Microsoft.Xna.Framework.Graphics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553, processorArchitecture=x86" />
    <Reference Condition="'$(OS)' == 'Windows_NT'" Include="Microsoft.Xna.Framework.Xact, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553, processorArchitecture=x86" />
    <Reference Condition="'$(OS)' == 'Windows_NT'" Include="WindowsBase" />
  </ItemGroup>
  <ItemGroup Condition="'$(OS)' != 'Windows_NT'">
    <Reference Condition="'$(OS)' != 'Windows_NT'" Include="FNA, Version=0.0.0.1, Culture=neutral, PublicKeyToken=null">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\References\FNA.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Condition="'$(OS)' != 'Windows_NT'" Include="WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\References\WindowsBase.dll</HintPath>
      <Private>True</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Reference Include="Ionic.Zip.CF, Version=1.9.1.8, Culture=neutral, PublicKeyToken=edbe51ad942a3f5c, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\References\Ionic.Zip.CF.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Xna.Framework.Game, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553, processorArchitecture=x86">
      <EmbedInteropTypes>False</EmbedInteropTypes>
    </Reference>
    <Reference Include="Newtonsoft.Json, Version=4.5.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\References\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="Steamworks.NET, Version=7.0.0.0, Culture=neutral, processorArchitecture=x86">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\References\Steamworks.NET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="..\..\SharedAssemblyInfo.cs">
      <Link>Properties\SharedAssemblyInfo.cs</Link>
    </Compile>
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\Prism.Injector\Prism.Injector.csproj">
      <Project>{fa53dc38-9b2b-45d3-818e-3e60f69143f6}</Project>
      <Name>Prism.Injector</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="..\..\References\FNA.dll.config">
      <Link>RefDlls\FNA.dll.config</Link>
    </EmbeddedResource>
    <None Include="app.config" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="..\..\References\FNA.dll">
      <Link>RefDlls\FNA.dll</Link>
    </EmbeddedResource>
    <EmbeddedResource Include="..\..\References\Ionic.Zip.CF.dll">
      <Link>RefDlls\Ionic.Zip.CF.dll</Link>
    </EmbeddedResource>
    <EmbeddedResource Include="..\..\References\Newtonsoft.Json.dll">
      <Link>RefDlls\Newtonsoft.Json.dll</Link>
    </EmbeddedResource>
    <EmbeddedResource Include="..\..\References\Steamworks.NET.dll">
      <Link>RefDlls\Steamworks.NET.dll</Link>
    </EmbeddedResource>
    <EmbeddedResource Include="..\..\References\WindowsBase.dll">
      <Link>RefDlls\WindowsBase.dll</Link>
    </EmbeddedResource>
    <Content Include="..\..\res\Icons\PrismIcon_Misc.ico" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PostBuildEvent Condition="'$(RealOS)' == 'Windows_NT'">
      rem first, merge the patcher, injector and mono.cecil assemblies into one, useful for distribution
      md "$(ProjectDir)..\..\Bin\$(Configuration)\$(OSEnum)\"
      "$(ProjectDir)..\ILRepack\ILRepack.exe" /union /target:exe "/out:$(ProjectDir)..\..\Bin\$(Configuration)\$(OSEnum)\Prism.TerrariaPatcher-merged.exe" "$(TargetPath)" "$(TargetDir)Prism.Injector.dll" "$(TargetDir)Mono.Cecil.dll"

      rem this patches the Terraria assembly
      rem in order to build, one must provide their own .exe.
      rem this will create a patched terraria assembly, which is referenced by Prism.csproj.
      rem a shell script is used in unix environments.
      rem executing it here will make sure the assembly exists before the assembly resolution is started when building Prism.csproj.

      "$(TargetPath)" msbuild "$(ProjectDir)..\..\References\Terraria.exe" "$(ProjectDir)..\..\References\Prism.Terraria.dll"
    </PostBuildEvent>
    <PostBuildEvent Condition="'$(RealOS)' != 'Windows_NT'">
      # first, merge the patcher, injector and mono.cecil assemblies into one, useful for distribution
      # fyi, sometimes, xbuild variables can get borked in the postbuild
      mkdir "$(ProjectDir)../../Bin/$(Configuration)/$(OSEnum)/"
      mono "$(ProjectDir)..\ILRepack\ILRepack.exe" --union --target:exe "--out:$(ProjectDir)../../Bin/$(Configuration)/$(OSEnum)/Prism.TerrariaPatcher-merged.exe" "$(ProjectDir)bin/$(Configuration)/Prism.TerrariaPatcher.exe" "$(ProjectDir)bin/$(Configuration)/Prism.Injector.dll" "$(ProjectDir)bin/$(Configuration)/Mono.Cecil.dll"

      # this patches the Terraria assembly
      # in order to build, one must provide their own .exe.
      # this will create a patched terraria assembly, which is referenced by Prism.csproj.
      # a batch script is used in windows environments.
      # executing it here will make sure the assembly exists before the assembly resolution is started when building Prism.csproj.

      mono "$(ProjectDir)bin/$(Configuration)/Prism.TerrariaPatcher.exe" msbuild "$(ProjectDir)../../References/Terraria.exe" "$(ProjectDir)../../References/Prism.Terraria.dll"
    </PostBuildEvent>
  </PropertyGroup>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it.
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>
